# Prometheus Operator values for Anava Vision monitoring
prometheus:
  prometheusSpec:
    serviceMonitorSelectorNilUsesHelmValues: false
    serviceMonitorSelector: {}
    serviceMonitorNamespaceSelector: {}
    ruleSelectorNilUsesHelmValues: false
    ruleSelector: {}
    ruleNamespaceSelector: {}
    retention: 30d
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: standard
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 50Gi
    resources:
      requests:
        cpu: 500m
        memory: 2Gi
      limits:
        cpu: 2000m
        memory: 4Gi

grafana:
  enabled: true
  adminPassword: anava-admin
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: letsencrypt-prod
    hosts:
      - grafana.anava-vision.com
    tls:
      - secretName: grafana-tls
        hosts:
          - grafana.anava-vision.com
  
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'anava-vision'
        orgId: 1
        folder: 'Anava Vision'
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/anava-vision
  
  dashboards:
    anava-vision:
      anava-vision-overview:
        json: |
          {
            "dashboard": {
              "title": "Anava Vision Overview",
              "panels": [
                {
                  "title": "Active Cameras",
                  "targets": [
                    {
                      "expr": "count(up{job=\"anava-vision-cameras\"})"
                    }
                  ],
                  "gridPos": {"h": 8, "w": 6, "x": 0, "y": 0}
                },
                {
                  "title": "WebSocket Connections",
                  "targets": [
                    {
                      "expr": "anava_vision_websocket_connections"
                    }
                  ],
                  "gridPos": {"h": 8, "w": 6, "x": 6, "y": 0}
                },
                {
                  "title": "API Request Rate",
                  "targets": [
                    {
                      "expr": "rate(anava_vision_http_requests_total[5m])"
                    }
                  ],
                  "gridPos": {"h": 8, "w": 6, "x": 12, "y": 0}
                },
                {
                  "title": "System Health",
                  "targets": [
                    {
                      "expr": "up{namespace=\"anava-vision\"}"
                    }
                  ],
                  "gridPos": {"h": 8, "w": 6, "x": 18, "y": 0}
                }
              ]
            }
          }
      
      anava-vision-performance:
        json: |
          {
            "dashboard": {
              "title": "Anava Vision Performance",
              "panels": [
                {
                  "title": "Response Time",
                  "targets": [
                    {
                      "expr": "histogram_quantile(0.95, rate(anava_vision_http_duration_seconds_bucket[5m]))"
                    }
                  ]
                },
                {
                  "title": "CPU Usage",
                  "targets": [
                    {
                      "expr": "rate(container_cpu_usage_seconds_total{namespace=\"anava-vision\"}[5m])"
                    }
                  ]
                },
                {
                  "title": "Memory Usage",
                  "targets": [
                    {
                      "expr": "container_memory_usage_bytes{namespace=\"anava-vision\"}"
                    }
                  ]
                }
              ]
            }
          }

alertmanager:
  config:
    global:
      resolve_timeout: 5m
      slack_api_url: 'YOUR_SLACK_WEBHOOK_URL'
    
    route:
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 12h
      receiver: 'anava-vision-alerts'
      routes:
      - match:
          severity: critical
        receiver: 'anava-vision-critical'
    
    receivers:
    - name: 'anava-vision-alerts'
      slack_configs:
      - channel: '#anava-vision-alerts'
        title: 'Anava Vision Alert'
        text: '{{ range .Alerts }}{{ .Annotations.summary }}\n{{ .Annotations.description }}{{ end }}'
    
    - name: 'anava-vision-critical'
      slack_configs:
      - channel: '#anava-vision-critical'
        title: 'CRITICAL: Anava Vision Alert'
        text: '{{ range .Alerts }}{{ .Annotations.summary }}\n{{ .Annotations.description }}{{ end }}'
      pagerduty_configs:
      - service_key: 'YOUR_PAGERDUTY_KEY'