version: '3.8'

services:
  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: anava-traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    environment:
      - CF_API_EMAIL=${CF_API_EMAIL}
      - CF_API_KEY=${CF_API_KEY}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/traefik.yml:ro
      - ./traefik/config.yml:/config.yml:ro
      - ./traefik/acme.json:/acme.json
      - ./traefik/logs:/logs
    networks:
      - anava-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=http"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_AUTH}"
      - "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.traefik.middlewares=traefik-https-redirect"
      - "traefik.http.routers.traefik-secure.entrypoints=https"
      - "traefik.http.routers.traefik-secure.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik-secure.middlewares=traefik-auth"
      - "traefik.http.routers.traefik-secure.tls=true"
      - "traefik.http.routers.traefik-secure.tls.certresolver=cloudflare"
      - "traefik.http.routers.traefik-secure.service=api@internal"

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: anava-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=anava_vision
      - POSTGRES_USER=anava
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - anava-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U anava -d anava_vision"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: anava-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - anava-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Camera Discovery Supervisor
  supervisor:
    build:
      context: .
      dockerfile: Dockerfile.supervisor
    container_name: anava-supervisor
    restart: unless-stopped
    volumes:
      - /etc/anava-vision:/etc/anava-vision
      - /var/lib/anava-vision:/var/lib/anava-vision
      - ./supervisor.py:/app/supervisor.py:ro
    networks:
      - anava-network
    environment:
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=INFO
    depends_on:
      - redis
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.supervisor.rule=Host(`supervisor.${DOMAIN}`)"
      - "traefik.http.routers.supervisor.entrypoints=https"
      - "traefik.http.routers.supervisor.tls.certresolver=cloudflare"

  # Camera Stream Processor
  camera-streams:
    image: anava/stream-processor:latest
    container_name: anava-streams
    restart: unless-stopped
    volumes:
      - /etc/anava-vision:/etc/anava-vision:ro
      - stream-data:/data
    networks:
      - anava-network
    environment:
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379
      - DATABASE_URL=postgresql://anava:${DB_PASSWORD}@postgres:5432/anava_vision
    depends_on:
      - redis
      - postgres
      - supervisor
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.streams.rule=Host(`streams.${DOMAIN}`)"
      - "traefik.http.routers.streams.entrypoints=https"
      - "traefik.http.routers.streams.tls.certresolver=cloudflare"
      - "traefik.http.services.streams.loadbalancer.server.port=8000"

  # Web Application
  web-app:
    image: anava/web-app:latest
    container_name: anava-web
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - API_URL=https://api.${DOMAIN}
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379
      - DATABASE_URL=postgresql://anava:${DB_PASSWORD}@postgres:5432/anava_vision
    networks:
      - anava-network
    depends_on:
      - api
      - redis
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`${DOMAIN}`) || Host(`www.${DOMAIN}`)"
      - "traefik.http.routers.web.entrypoints=https"
      - "traefik.http.routers.web.tls.certresolver=cloudflare"
      - "traefik.http.services.web.loadbalancer.server.port=3000"

  # API Server
  api:
    image: anava/api-server:latest
    container_name: anava-api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://anava:${DB_PASSWORD}@postgres:5432/anava_vision
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - CAMERA_CONFIG_PATH=/etc/anava-vision/cameras.yaml
    volumes:
      - /etc/anava-vision:/etc/anava-vision:ro
      - api-uploads:/app/uploads
    networks:
      - anava-network
    depends_on:
      - postgres
      - redis
      - supervisor
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.${DOMAIN}`)"
      - "traefik.http.routers.api.entrypoints=https"
      - "traefik.http.routers.api.tls.certresolver=cloudflare"
      - "traefik.http.services.api.loadbalancer.server.port=4000"

  # WebRTC Signaling Server
  webrtc:
    image: anava/webrtc-server:latest
    container_name: anava-webrtc
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379
      - STUN_SERVER=stun:stun.l.google.com:19302
    networks:
      - anava-network
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.webrtc.rule=Host(`webrtc.${DOMAIN}`)"
      - "traefik.http.routers.webrtc.entrypoints=https"
      - "traefik.http.routers.webrtc.tls.certresolver=cloudflare"
      - "traefik.http.services.webrtc.loadbalancer.server.port=8080"

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: anava-prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - anava-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN}`)"
      - "traefik.http.routers.prometheus.entrypoints=https"
      - "traefik.http.routers.prometheus.tls.certresolver=cloudflare"
      - "traefik.http.routers.prometheus.middlewares=traefik-auth"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: anava-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - anava-network
    depends_on:
      - prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)"
      - "traefik.http.routers.grafana.entrypoints=https"
      - "traefik.http.routers.grafana.tls.certresolver=cloudflare"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # Log Aggregation - Loki
  loki:
    image: grafana/loki:latest
    container_name: anava-loki
    restart: unless-stopped
    volumes:
      - ./loki/loki-config.yml:/etc/loki/loki-config.yml:ro
      - loki-data:/loki
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - anava-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.loki.rule=Host(`loki.${DOMAIN}`)"
      - "traefik.http.routers.loki.entrypoints=https"
      - "traefik.http.routers.loki.tls.certresolver=cloudflare"
      - "traefik.http.services.loki.loadbalancer.server.port=3100"

  # Log Collector - Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: anava-promtail
    restart: unless-stopped
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./promtail/promtail-config.yml:/etc/promtail/promtail-config.yml:ro
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - anava-network

  # Automatic Updater
  watchtower:
    image: containrrr/watchtower
    container_name: anava-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_SCHEDULE=0 0 2 * * *
      - WATCHTOWER_NOTIFICATIONS=email
      - WATCHTOWER_NOTIFICATION_EMAIL_FROM=${EMAIL_FROM}
      - WATCHTOWER_NOTIFICATION_EMAIL_TO=${EMAIL_TO}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=${SMTP_SERVER}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=${SMTP_PORT}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=${SMTP_USER}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=${SMTP_PASSWORD}
    networks:
      - anava-network

networks:
  anava-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
  redis-data:
  stream-data:
  api-uploads:
  prometheus-data:
  grafana-data:
  loki-data: