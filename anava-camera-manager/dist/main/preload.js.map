{"version":3,"file":"preload.js","mappings":";;;;;;;;;;AAAA,qC;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;;ACtBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB,mBAAO,CAAC,0BAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://anava-camera-manager/external node-commonjs \"electron\"","webpack://anava-camera-manager/webpack/bootstrap","webpack://anava-camera-manager/./src/main/preload.ts"],"sourcesContent":["module.exports = require(\"electron\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst electron_1 = require(\"electron\");\n// Expose protected methods that allow the renderer process to use\n// the ipcRenderer without exposing the entire object\nelectron_1.contextBridge.exposeInMainWorld('electronAPI', {\n    discoverCameras: () => electron_1.ipcRenderer.invoke('discover-cameras'),\n    deployACAP: (cameraIP, config) => electron_1.ipcRenderer.invoke('deploy-acap', cameraIP, config),\n    getCloudConfig: () => electron_1.ipcRenderer.invoke('get-cloud-config'),\n    // Progress tracking\n    onDeploymentProgress: (callback) => {\n        electron_1.ipcRenderer.on('deployment-progress', (event, progress) => callback(progress));\n    },\n    // Camera events\n    onCameraDiscovered: (callback) => {\n        electron_1.ipcRenderer.on('camera-discovered', (event, camera) => callback(camera));\n    }\n});\n"],"names":[],"sourceRoot":""}